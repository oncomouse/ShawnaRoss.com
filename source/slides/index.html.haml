---
layout: false
---
- depth = 1
- path_hunt = "slides"
- if defined? directory
	- path_hunt += "/#{directory}"
	- depth += path_hunt.count("/")
- else
	- directory = nil

- # Naturalize a string that contains numbers
- def naturalized s
	- s.scan(/[^\d\.]+|[\d\.]+/).collect { |f| f.match(/\d+(\.\d+)?/) ? f.to_f : f }

!!! 5
%html
	%head
		%meta{ :charset => "utf-8" }/
		%title Slides
		:sass
			@import url(https://fonts.googleapis.com/css?family=Lato:300,400,300italic,400italic)

			body
				font:
					family: "Lato", "Helvetica", sans-serif
					weight: 300
			#content
				width: 75%
				margin: 0 auto
			h1
				font:
					size: 4em
					weight: 400
			ul
				list:
					style: none
				margin: 0
				padding: 0
					top: 1em
				li
					margin: 0
						top: 1em
						bottom: 1em
					padding: 0
			li,p
				font:
					size: 2.5em

			a
				color: #000

				&:hover
					color: #fff
					background: #d33682
	
	%body
		#content
			%h1 
				Slides
				- if !directory.nil?
					= "/#{directory}"
			:markdown

			
				This is [Shawna Ross](http://www.shawnaross.com)'s slide repository. It hosts slides made using [Remark.js](http://remarkjs.com).
		
			%ul
				-  Dir.glob("source/#{path_hunt}/**/*").map{|item| item.gsub("source","").gsub(/\.html.*$/, ".html")}.each do |item|
					- if File.extname(item) == ""
						- item += "/index.html"
					- resource = sitemap.find_resource_by_path(item)
					- next if not defined? resource.data
					
					- next if resource.data["hidden"] and resource.data["hidden"] == true

					- # Skip the template file
					- next if resource.path =~ /remark_markdown_template.html/
					- if resource.data["title"] and resource.destination_path.count("/") <= depth
						%li
							= link_to "#{resource.data["title"]}",  resource.destination_path.gsub(path_hunt + "/", "")
							%small (Remark)
					- if resource.destination_path =~ /.+\/index.html/ and resource.destination_path != "#{directory}/index.html" and resource.destination_path.count("/") - 1 == depth
						%li
							= link_to resource.destination_path.gsub(path_hunt + "/", "").gsub("index.html","").capitalize, resource.destination_path.gsub(path_hunt + "/", "")
				